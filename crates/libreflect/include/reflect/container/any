#pragma once

#include "reflect/polyfill.hpp"
#include "reflect/typeinfo.hpp"
#include "reflect/traits/type_traits"

namespace zeno
{
namespace reflect
{
    struct AnyError {};
    struct AnyCloneError : public AnyError {};
    struct AnyCastError : public AnyError {};
    struct AnyCastNullError : public AnyError {};
    struct AnyCastTypeError : public AnyError {};

    class Any;

    template <typename T, typename... Args>
    Any make_any(Args&&... args);

    template <typename T>
    T any_cast(Any& operand);

    template <typename T>
    T any_cast(const class Any& operand);

    template<typename T>
    T* any_cast(Any* operand) noexcept;

    template<typename T>
    const T* any_cast(const Any* operand) noexcept;

    class Any {
    public:
        ~Any() {
            reset();
        }

        Any() = default;

        Any(const Any& other) {
            if (other.has_value()) {
                m_value_container = other.m_value_container->clone();
            }
        }

        Any(Any&& other) noexcept : m_value_container(other.m_value_container) {
            other.m_value_container = nullptr;
        }

        template <typename T>
        Any(T&& value) {
            emplace<TTDecay<T>>(zeno::reflect::forward<T>(value));
        }

        Any& operator=(Any other) {
            swap(other);
            return *this;
        }

        operator bool() const {
            return has_value();
        }

        template <typename T, typename... Args>
        void emplace(Args&&... args) {
            using DecayType = TTDecay<T>;
            reset();
            m_value_container = new ValueContainer<DecayType>(DecayType(zeno::reflect::forward<Args>(args)...));
        }

        void swap(Any& other) noexcept {
            IContainer* other_container = other.m_value_container;
            other.m_value_container = m_value_container;
            m_value_container = other_container;
        }

        bool has_value() const {
            return nullptr != m_value_container;
        }

        void reset() {
            delete m_value_container;
            m_value_container = nullptr;
        }

        const RTTITypeInfo& type() const {
            if (!has_value()) {
                throw AnyCastError();
            }
            return m_value_container->type();
        }

    private:
        class IContainer {
        public:
            virtual ~IContainer() {}
            virtual const RTTITypeInfo& type() const = 0;
            virtual bool is_type(const RTTITypeInfo& other_type) const = 0;
            virtual IContainer* clone() const = 0;
        };

        Any(IContainer* container) : m_value_container(container) {};

        template <typename T>
        class ValueContainer : public IContainer {
        public:
            using ValueType = T;

            ValueType m_value;

            template <typename U = T>
            ValueContainer(const U& value, TTEnableIf<VTIsCopyConstructible<U>, U>* = nullptr): m_value(value) {}

            template <typename U = T>
            ValueContainer(U&& value): m_value(zeno::reflect::move(value)) {}

            virtual const RTTITypeInfo& type() const override {
                return type_info<TTDecay<TTRemovePointer<ValueType>>>();
            }

            virtual bool is_type(const RTTITypeInfo& other_type) const override {
#if REFLECT_LIBRARY_ANY_FASTPATH
                return other_type.equal_fast(other_type);
#else
                return other_type == this->type();
#endif
            }

            virtual IContainer* clone() const override {
                if REFLECT_CONSTEXPR (VTIsCopyConstructible<T>) {
                    return new ValueContainer<ValueType>(m_value);
                } else {
                    throw AnyCloneError();
                }
            }
        };

        IContainer* m_value_container = nullptr;

        // ==== Friend Functions ====
        template <typename T, typename... Args>
        friend Any make_any(Args&&... args);

        template <typename T>
        friend T any_cast(Any& operand);

        template <typename T>
        friend T any_cast(const Any& operand);

        template<typename T>
        friend T* any_cast(Any* operand) noexcept;

        template<typename T>
        friend const T* any_cast(const Any* operand) noexcept;

        // ==== Friend Functions ====
    };

    template <typename T, typename... Args>
    Any make_any(Args&&... args) {
        using DecayType = TTDecay<T>;

        return Any(DecayType(zeno::reflect::forward<Args>(args)...));
    }

    template <typename T>
    T any_cast(Any& operand) {
        using NonRef = TTDecay<T>;

        if (!operand.has_value()) {
            throw AnyCastNullError();
        }

        if (!operand.m_value_container->is_type(type_info<NonRef>())) {
            throw AnyCastTypeError();
        }

        return static_cast<Any::ValueContainer<NonRef>&>(*operand.m_value_container).m_value;
    }

    template <typename T>
    T any_cast(const Any& operand) {
        using NonRef = TTDecay<T>;

        if (!operand.has_value()) {
            throw AnyCastNullError();
        }

        if (!operand.m_value_container->is_type(type_info<NonRef>())) {
            throw AnyCastTypeError();
        }

        return static_cast<const Any::ValueContainer<NonRef>&>(*operand.m_value_container).m_value;
    }

    template<typename T>
    T* any_cast(Any* operand) noexcept {
        using NonRef = TTDecay<T>;
        if (operand && operand->has_value() && operand->m_value_container->is_type(type_info<NonRef>())) {
            return &static_cast<Any::ValueContainer<NonRef>*>(operand->m_value_container)->m_value;
        }
        return nullptr;
    }

    template<typename T>
    const T* any_cast(const Any* operand) noexcept {
        using NonRef = TTDecay<T>;
        if (operand && operand->has_value() && operand->m_value_container->is_type(type_info<NonRef>())) {
            return &static_cast<const Any::ValueContainer<NonRef>*>(operand->m_value_container)->m_value;
        }
        return nullptr;
    }
}
}
