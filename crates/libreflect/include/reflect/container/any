#pragma once

#include "reflect/polyfill.hpp"
#include "reflect/typeinfo.hpp"
#include "reflect/traits/type_traits"
#include <type_traits>

namespace zeno
{
namespace reflect
{
    class Any;

namespace any
{
    class IContainer {
    public:
        virtual ~IContainer() {}
        virtual const RTTITypeInfo& type() const = 0;
        virtual bool is_type(const RTTITypeInfo& other_type) const = 0;
        virtual IContainer* clone() const = 0;
    };


    template <typename T>
    class ValueContainer : public IContainer {
    public:
        using ValueType = T;

        ValueType m_value;

        template <typename U = T>
        ValueContainer(const U& value, TTEnableIf<VTIsCopyConstructible<U>, U>* = nullptr): m_value(value) {}

        template <typename U = T>
        ValueContainer(U&& value): m_value(zeno::reflect::move(value)) {}

        template <typename U, typename... Args>
        ValueContainer(TInPlaceType<U>, Args&&... args) : m_value(zeno::reflect::forward<Args>(args)...) {}

        virtual const RTTITypeInfo& type() const override {
            return type_info<std::decay_t<ValueType>>();
        }

        virtual bool is_type(const RTTITypeInfo& other_type) const override {
#if REFLECT_LIBRARY_ANY_FASTPATH
            return other_type.equal_fast(other_type);
#else
            return other_type == this->type();
#endif
        }

        virtual IContainer* clone() const override {
            if REFLECT_CONSTEXPR (VTIsCopyConstructible<T>) {
                return new ValueContainer<ValueType>(m_value);
            } else {
                ZENO_CHECK(VTIsCopyConstructible<T>);
            }
        }
    };

    template <>
    class ValueContainer<void> : public IContainer {
    public:
        using ValueType = void;

        virtual const RTTITypeInfo& type() const override {
            return type_info<ValueType>();
        }

        virtual bool is_type(const RTTITypeInfo& other_type) const override {
#if REFLECT_LIBRARY_ANY_FASTPATH
            return other_type.equal_fast(other_type);
#else
            return other_type == this->type();
#endif
        }

        virtual IContainer* clone() const override {
            return new ValueContainer<void>();
        }
    };

    template <typename T>
    class ValueContainer<T*> : public IContainer {
    public:
        using ValueType = T*;
        ValueType m_value;

        ValueContainer(ValueType value = nullptr) : m_value(value) {}

        virtual const RTTITypeInfo& type() const override {
            return type_info<ValueType>();
        }

        virtual bool is_type(const RTTITypeInfo& other_type) const override {
#if REFLECT_LIBRARY_ANY_FASTPATH
            return other_type.equal_fast(this->type());
#else
            return other_type == this->type();
#endif
        }

        virtual IContainer* clone() const override {
            if REFLECT_CONSTEXPR (VTIsCopyConstructible<T*>) {
                return new ValueContainer<ValueType>(m_value);
            } else {
                ZENO_CHECK(VTIsCopyConstructible<T*>);
            }
        }
    };

    template <>
    class ValueContainer<void*> : public IContainer {
    public:
        using ValueType = void*;
        ValueType m_value;

        ValueContainer(ValueType value = nullptr) : m_value(value) {}

        virtual const RTTITypeInfo& type() const override {
            return type_info<ValueType>();
        }

        virtual bool is_type(const RTTITypeInfo& other_type) const override {
#if REFLECT_LIBRARY_ANY_FASTPATH
            return other_type.equal_fast(this->type());
#else
            return other_type == this->type();
#endif
        }

        virtual IContainer* clone() const override {
            return new ValueContainer<void*>(m_value);
        }
    };

};

    template <typename T, typename... Args>
    Any make_any(Args&&... args);

    template <typename T>
    T any_cast(Any& operand);

    template <typename T>
    T any_cast(const class Any& operand);

    template<typename T>
    T* any_cast(Any* operand) noexcept;

    template<typename T>
    const T* any_cast(const Any* operand) noexcept;

    class Any {
    public:
        REFLECT_STATIC_CONSTEXPR ~Any() {
            reset();
        }

        REFLECT_STATIC_CONSTEXPR Any() = default;

        REFLECT_STATIC_CONSTEXPR Any(const Any& other) {
            if (other.has_value()) {
                m_value_container = other.m_value_container->clone();
            }
        }

        REFLECT_STATIC_CONSTEXPR Any(Any&& other) noexcept : m_value_container(other.m_value_container) {
            other.m_value_container = nullptr;
        }

        template <typename T>
        Any(T&& value) {
            emplace<std::decay_t<T>>(zeno::reflect::forward<T>(value));
        }

        template <typename T, typename... Args>
        Any(TInPlaceType<T>, Args&&... args) {
            emplace<std::decay_t<T>>(zeno::reflect::forward<Args>(args)...);
        }

        template <typename T, typename... Args>
        Any(TInPlaceType<T*>, Args&&... args) {
            emplace<std::decay_t<T>>(zeno::reflect::forward<Args>(args)...);
        }

        Any& operator=(const Any& other) {
            Any(other).swap(*this);
            return *this;
        }

        Any& operator=(Any&& other) {
            Any(zeno::reflect::move(other)).swap(*this);
            return *this;
        }

        template <typename ValueType>
        Any& operator=(ValueType&& rhs) {
            Any(zeno::reflect::forward<ValueType>(rhs)).swap(*this);
            return *this;
        }

        operator bool() const {
            return has_value();
        }

        template <typename T, typename... Args>
        void emplace(Args&&... args) {
            if REFLECT_FORCE_CONSTEPXR (VTIsPointer<T>) {
                // TODO: Fix TTDecay
                using DecayType = std::decay_t<T>;
                reset();
                m_value_container = new any::ValueContainer<DecayType>(zeno::reflect::forward<Args>(args)...);
            } else {
                using DecayType = std::decay_t<T>;
                reset();
                m_value_container = new any::ValueContainer<DecayType>(TInPlaceType<DecayType>(), zeno::reflect::forward<Args>(args)...);
            }
        }

        void swap(Any& other) noexcept {
            any::IContainer* other_container = other.m_value_container;
            other.m_value_container = m_value_container;
            m_value_container = other_container;
        }

        bool has_value() const {
            return nullptr != m_value_container;
        }

        REFLECT_STATIC_CONSTEXPR void reset() {
            delete m_value_container;
            m_value_container = nullptr;
        }

        const RTTITypeInfo& type() const {
            ZENO_CHECK_MSG(has_value(), "RTTI type is not available for <nullany>");
            return m_value_container->type();
        }

        REFLECT_STATIC_CONSTEXPR static Any make_null() {
            return Any();
        }

    private:
        Any(any::IContainer* container) : m_value_container(container) {};

        any::IContainer* m_value_container = nullptr;

        // ==== Friend Functions ====
        template <typename T, typename... Args>
        friend Any make_any(Args&&... args);

        template <typename T>
        friend T any_cast(Any& operand);

        template <typename T>
        friend T any_cast(const Any& operand);

        template<typename T>
        friend T* any_cast(Any* operand) noexcept;

        template<typename T>
        friend const T* any_cast(const Any* operand) noexcept;

        // ==== Friend Functions ====
    };

    /**
     * @brief Create any in-place of type T with args.
     * @tparam T Type to been created.
     * @tparam Args Arguments to be forwarded to constructor.
     */
    template <typename T, typename... Args>
    Any make_any(Args&&... args) {
        // Old impl depends on compiler RVO
        // return Any(zeno::reflect::move(DecayType(zeno::reflect::forward<Args>(args)...)));
        
        // Forward parameters directly into Any constructors
        return Any(TInPlaceType<T>(), zeno::reflect::forward<Args>(args)...);
    }

    /**
     * @brief Cast any to type T. 
     * @tparam T Type to be casted.
     * @param operand Any to be casted.
     * 
     * @note If T is a value type, it will be copied from operand to returned value.
     */
    template <typename T>
    T any_cast(Any& operand) {
        using NonRef = std::decay_t<T>;

        ZENO_CHECK_MSG(operand.has_value(), "Can't cast using <nullany>");
        ZENO_CHECK_MSG(operand.m_value_container->is_type(type_info<NonRef>()), "Type cast to no matched");

        if REFLECT_FORCE_CONSTEPXR (std::is_rvalue_reference_v<T>) {
            return zeno::reflect::move(static_cast<any::ValueContainer<NonRef>&>(*operand.m_value_container).m_value);
        } else {
            return static_cast<any::ValueContainer<NonRef>&>(*operand.m_value_container).m_value;
        }

    }

    /**
     * @brief Cast any to type T. 
     * @tparam T Type to be casted.
     * @param operand Any to be casted.
     * 
     * @note If T is a value type, it will be copied from operand to returned value.
     */
    template <typename T>
    T any_cast(const Any& operand) {
        using NonRef = std::decay_t<T>;

        ZENO_CHECK_MSG(operand.has_value(), "Can't cast using <nullany>");
        ZENO_CHECK_MSG(operand.m_value_container->is_type(type_info<NonRef>()), "Type cast to no matched");

        return static_cast<const any::ValueContainer<NonRef>&>(*operand.m_value_container).m_value;
    }

    template<typename T>
    T* any_cast(Any* operand) noexcept {
        using NonRef = std::decay_t<T>;
        if (operand && operand->has_value() && operand->m_value_container->is_type(type_info<NonRef>())) {
            return &static_cast<any::ValueContainer<NonRef>*>(operand->m_value_container)->m_value;
        }
        return nullptr;
    }

    template<typename T>
    const T* any_cast(const Any* operand) noexcept {
        using NonRef = std::decay_t<T>;
        if (operand && operand->has_value() && operand->m_value_container->is_type(type_info<NonRef>())) {
            return &static_cast<const any::ValueContainer<NonRef>*>(operand->m_value_container)->m_value;
        }
        return nullptr;
    }
}
}
