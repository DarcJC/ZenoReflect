#pragma once

#include <cstdint>
#include "reflect/traits/constant_eval.hpp"
#include "reflect/traits/reference.hpp"
#include "reflect/traits/move.hpp"

namespace zeno
{
namespace reflect
{
    template <typename... Ts>
    class Tuple;

    template <>
    class Tuple<> {};

    template <typename T, typename... Ts>
    class Tuple<T, Ts...> : public Tuple<Ts...> {
        T m_elem;

    public:
        template <typename U, typename... Us>
        Tuple(U&& head, Us&&... tail) : Tuple<Ts...>(forward<Us>(tail)...), m_elem(forward<U>(head)) {}

        Tuple() = default;

        Tuple(const Tuple& other) : Tuple<Ts...>(other), m_elem(other.m_elem) {}

        Tuple(Tuple&& other) : Tuple<Ts...>(move(other)), m_elem(move(other.m_elem)) {}

        Tuple& operator=(const Tuple& other) {
            if (this != &other) {
                Tuple<Ts...>::operator=(other);
                m_elem = other.m_elem;
            }
            return *this;
        }

        Tuple& operator=()(Tuple&& other) {
            if (this != &other) {
                Tuple<Ts...>::operator=(move(other));
                m_elem = move(other.m_elem);
            }
            return *this;
        }

        T& get(TIntegralConstant<size_t, 0>) {
            return m_elem;
        }

        template <size_t I>
        decltype(auto) get(TIntegralConstant<size_t, I>) {
            static_assert(I > 0, "Tuple index out of range");
            return Tuple<Ts...>::get(TIntegralConstant<size_t, I - 1>{});
        };

        template <size_t I>
        decltype(auto) get() {
            return get(TIntegralConstant<size_t, I>{});
        }

        bool operator==(const Tuple& other) const {
            return m_elem == other.m_elem && static_cast<const Tuple<Ts...>&>(*this) == other;
        }

        bool operator!=(const Tuple& other) const {
            return !(*this == other);
        }
    };

    template <typename... Ts>
    Tuple<Ts...> make_tuple(Ts&&... args) {
        return Tuple<Ts...>(forward<Ts>(args)...);
    }
}
}
