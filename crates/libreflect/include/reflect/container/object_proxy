#pragma once

#include "reflect/traits/type_traits"

namespace zeno
{
namespace reflect
{
    template <typename T, typename = TTEnableIf<VTIsMemberPointer<T>>>
    class MemberProxy {
    private:
        // Pointer to member
        T m_member_ptr;
    public:
        explicit MemberProxy(T ptr_to_member): m_member_ptr(ptr_to_member) {}

        template <typename SelfType, typename... Args>
        auto operator()(SelfType&& self, Args&&... args) const
        -> TTEnableIf<VTIsMemberFunction<TTRemovePointer<T>>, 
            decltype((forward<SelfType>(self).*m_member_ptr)(forward<Args>(args)...))>
        {
            return (forward<SelfType>(self).*m_member_ptr)(forward<Args>(args)...);
        }

        template <typename SelfType>
        auto operator()(SelfType&& self) const
        -> TTEnableIf<!VTIsMemberFunction<TTRemovePointer<T>>, 
            decltype(forward<SelfType>(self).*m_member_ptr)>
        {
            return forward<SelfType>(self).*m_member_ptr;
        }
    };

    class MemberAccessor {
    };
}
}
