#pragma once

#include "reflect/container/arraylist"
#include "reflect/container/any"
#include "reflect/type.hpp"
#include "reflect/utils/assert"
#include <tuple>
#include <cstdint>
#include <type_traits>

/**
 * "If it walks like a duck and it quacks like a duck, then it must be a duck"
 *     James Whitcomb Riley(1849-1961)
 */

namespace zeno
{
namespace reflect
{
    template <typename... Args>
    constexpr size_t get_args_length() {
        return std::tuple_size_v<std::tuple<Args...>>;
    }

    template <typename Ret, typename... Args>
    struct HighOrderCallableType {
        explicit HighOrderCallableType(const char* function_name) : function_name(function_name) {}

        bool invoke(Any& obj, Any& out_result, const ArrayList<Any*>& args = {}) {
            TypeHandle handle = obj.type();

            ZENO_CHECK_MSG(args.size() == get_args_length<Args...>(), "Arguments input must at the same size with declared.");

            // Check if this type is reflected
            if (TypeBase* type_info = handle.get_reflected_type_or_null()) {
                return invoke_member_function(type_info, obj, args, out_result);
            }

            return false;
        }

        const char* function_name;
    private:
        bool invoke_member_function(TypeBase* type, Any& that, const ArrayList<Any*>& args, Any& out_result) {
            ZENO_CHECK(nullptr != type);

            const ArrayList<IMemberFunction*>& member_functions = type->get_member_functions();
            for (const auto& member_function : member_functions) {
                ZENO_CHECK(nullptr != member_function);
                if (member_function->get_name() == StringView(function_name)) {
                    if (get_type<Ret>() == member_function->get_return_type() && member_function->is_suitable_to_invoke(args)) {
                        out_result = member_function->invoke(that, args);

                        if constexpr (std::is_same<void, Ret>()) {
                            return true;
                        } else if (out_result) {
                            return true;
                        }
                    }
                }
            }

            return false;
        }
    };
}
}
