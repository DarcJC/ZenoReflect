#pragma once

#include <cstdint>
#include <cstring>
#include <cassert>
#include <string_view>
#include "reflect/polyfill.hpp"
#include "reflect/typeinfo.hpp"

namespace zeno
{
namespace reflect
{
    template <typename CharType = char>
    class CStringUtil {
    public:
        using ValueType = CharType;

        REFLECT_CONSTEXPR static size_t strlen(const ValueType* cstr) {
            if (nullptr == cstr) {
                return 0;
            }

            const ValueType* end = cstr;
            while (*end) ++end;
            return end - cstr;
        }

        REFLECT_CONSTEXPR static ValueType* strcopy(const ValueType* cstr) {
            if (nullptr == cstr) {
                return nullptr;
            }

            size_t len = CStringUtil::strlen(cstr);
            ValueType* copied = new ValueType[len + 1];
            for (size_t i = 0; i < len; ++i) {
                copied[i] = cstr[i];
            }
            copied[len] = '\0';

            return copied;
        }

        REFLECT_CONSTEXPR static int strcmp(const ValueType* lhs, const ValueType* rhs) {
            while (*lhs && *rhs && (*lhs == *rhs)) {
                ++lhs;
                ++rhs;
            }
            return static_cast<unsigned char>(*lhs) - static_cast<unsigned char>(*rhs);
        }
    };

    // Small String Optimization on stack(also can be data segment and so on) memory size
    // Notice it memory usage will be SSO_BUFFER_SIZE + 1 because we need space to store '\0'
    constexpr size_t SSO_BUFFER_SIZE = 15;

    class LIBREFLECT_API simple_string {
    public:
        simple_string();
        simple_string(const char* s);
        simple_string(std::string_view s);

        simple_string(const simple_string& other);
        simple_string(simple_string&& other);

        simple_string& operator=(const simple_string& other) noexcept;
        simple_string& operator=(simple_string&& other) noexcept;

        bool operator==(const simple_string& other) const noexcept;
        bool operator!=(const simple_string& other) const noexcept;
        
        bool operator==(const char* other) const noexcept;
        bool operator!=(const char* other) const noexcept;

        virtual ~simple_string();

        bool is_empty() const noexcept;
        void swap(simple_string& other);

        operator std::string_view() noexcept;
        operator const char*() const noexcept;
        operator char*() noexcept;

        char* data();
        const char* data() const;
        const char* c_str() const;

        size_t length();
        void ensure_capacity(size_t new_length);

        simple_string& append(const char* s);
        simple_string& append(std::string_view s);

        simple_string& operator+=(const char* s);
        simple_string& operator+=(std::string_view s);
        simple_string& operator+=(const simple_string& other);

    private:
        union {
            char m_ss_buffer[SSO_BUFFER_SIZE + 1]; // internal buffer
            char* m_heap_data; // allocated by memory allocator
        };
        size_t m_length = 0;
        size_t m_capacity = SSO_BUFFER_SIZE;
        bool m_is_heap = false;

        void set_data(const char* s, size_t len);

    };

    using StringView = simple_string;
}
}

