#pragma once

#include <cstdint>
#include <cstring>
#include <cassert>
#include "reflect/polyfill.hpp"

namespace zeno
{
namespace reflect
{
    template <typename CharType = char>
    class CStringUtil {
    public:
        using ValueType = CharType;

        REFLECT_CONSTEXPR static size_t strlen(const ValueType* cstr) {
            if (nullptr == cstr) {
                return 0;
            }

            const ValueType* end = cstr;
            while (*end) ++end;
            return end - cstr;
        }

        REFLECT_CONSTEXPR static ValueType* strcopy(const ValueType* cstr) {
            if (nullptr == cstr) {
                return nullptr;
            }

            size_t len = CStringUtil::strlen(cstr);
            ValueType* copied = new ValueType[len + 1];
            for (size_t i = 0; i < len; ++i) {
                copied[i] = cstr[i];
            }
            copied[len] = '\0';

            return copied;
        }

        REFLECT_CONSTEXPR static int strcmp(const ValueType* lhs, const ValueType* rhs) {
            while (*lhs && *rhs && (*lhs == *rhs)) {
                ++lhs;
                ++rhs;
            }
            return static_cast<unsigned char>(*lhs) - static_cast<unsigned char>(*rhs);
        }
    };

    template <typename CharType = char>
    class StringViewBase {
    public:
        using ValueType = CharType;
        using Util = CStringUtil<ValueType>;
        using Self = StringViewBase;

    private:
        ValueType* m_data;
        size_t m_length;

    public:
        REFLECT_CONSTEXPR StringViewBase(const ValueType* s = nullptr) {
            if (s) {
                m_length = Util::strlen(s);
                m_data = nullptr;
                if (m_length > 0) {
                    m_data = Util::strcopy(s);
                }
            } else {
                m_data = nullptr;
                m_length = 0;
            }
        }

        REFLECT_CONSTEXPR StringViewBase(const StringViewBase& other) {
            if (other.m_data != nullptr) {
                m_data = Util::strcopy(other.data());
                m_length = other.m_length;
            } else {
                m_data = nullptr;
                m_length = 0;
            }
        }

        REFLECT_CONSTEXPR StringViewBase(StringViewBase&& other) {
            m_data = other.m_data;
            m_length = other.m_length;

            other.m_data = nullptr;
            other.m_length = 0;
        }

        virtual ~StringViewBase() {
            reset();
        }

        LIBREFLECT_INLINE size_t length() const {
            return m_length;
        }

        LIBREFLECT_INLINE bool is_valid_index(size_t index) const {
            return index < m_length;
        }

        LIBREFLECT_INLINE const ValueType& at(size_t index) const {
            assert(is_valid_index(index));
            return m_data[index];
        }

        LIBREFLECT_INLINE ValueType& at(size_t index) {
            assert(is_valid_index(index));
            return m_data[index];
        }

        LIBREFLECT_INLINE ValueType* data() {
            return m_data;
        }

        LIBREFLECT_INLINE const ValueType* data() const {
            return m_data;
        }

        LIBREFLECT_INLINE ValueType* c_str() {
            return data();
        }

        LIBREFLECT_INLINE const ValueType* c_str() const {
            return data();
        }

        LIBREFLECT_INLINE const ValueType& operator[](size_t index) const {
            return at(index);
        }

        LIBREFLECT_INLINE ValueType& operator[](size_t index) {
            return at(index);
        }

        ValueType& operator=(ValueType&& other) {
            delete m_data;

            m_data = other.m_data;
            m_length = other.m_length;

            other.m_data = nullptr;
            other.m_length = 0;

            return *this;
        }

        void reset() {
            delete m_data;
            m_data = nullptr;
            m_length = 0;
        }

        void emplace(const ValueType* s = nullptr) {
            reset();
            if (s) {
                m_length = Util::strlen(s);
                m_data = nullptr;
                if (m_length > 0) {
                    m_data = Util::strcopy(s);
                }
            } else {
                m_data = nullptr;
                m_length = 0;
            }
        }

        StringViewBase& operator=(const char* s) {
            emplace(s);
            return *this;
        }

        bool operator==(const StringViewBase& other) const {
            return Util::strcmp(m_data, other.m_data);
        }

        bool operator!=(const StringViewBase& other) const {
            return !(*this == other);
        }
    };

    using StringView = StringViewBase<char>;
}
}

