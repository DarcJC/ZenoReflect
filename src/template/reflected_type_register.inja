R"INJA(
#include "reflect/type"
#include "reflect/traits/type_traits"
#include "reflect/container/any"
#include "reflect/reflection.generated.hpp"
## for header_path in headers
#include "{{ header_path }}"
## endfor

using namespace zeno::reflect;

## for type_info in types
/// ==== Begin {{ type_info.qualified_name }} Register ====
namespace {

    /// === Begin Constructor Wrappers ===
## for ctor in type_info.ctors
    class ConstructorWrapperFor{{- type_info.normal_name -}}_{{- loop.index -}} : public ITypeConstructor {
    public:
        ConstructorWrapperFor{{- type_info.normal_name -}}_{{- loop.index -}}() : ITypeConstructor(get_type<{{ type_info.canonical_typename }}>()) {}

        virtual const ArrayList<RTTITypeInfo>& get_params() const override {
            static ArrayList<RTTITypeInfo> STATIC_LIST {
## for param in ctor.params
                    zeno::reflect::type_info<{{ param.type }}>(),
## endfor
            };
            return STATIC_LIST;
        }

        virtual const ArrayList<RTTITypeInfo>& get_params_dacayed() const override {
            static ArrayList<RTTITypeInfo> STATIC_LIST {
## for param in ctor.params
                    zeno::reflect::type_info<TTDecay<{{ param.type }}>>(),
## endfor
            };
            return STATIC_LIST;
        }

        virtual Any get_param_default_value(size_t index) override {
## for param in ctor.params
{% if param.has_default_arg %}
            if (index == {{ loop.index }}) {
                return { TInPlaceType<{{ param.type }}>{}, {{ param.default_arg }} };
            }
{% endif %}
## endfor
            return Any::make_null();
        }

        virtual void* new_instance(const ArrayList<Any>& params) const override {
            if (is_suitable_to_invoke(params)) {
## for param in ctor.params
                Any& any{{- loop.index }} = const_cast<Any&>(params[{{ loop.index }}]);
                {{ param.type }} p{{- loop.index }} = any_cast<{{ param.type }}>(any{{- loop.index -}});
## endfor
                return new {{ type_info.canonical_typename }}
                {
## for param in ctor.params
                    p{{- loop.index -}} {% if loop.index1 != length(ctor.params) %},{% endif %}
## endfor
                };
            }
            return nullptr;
        }

        virtual Any create_instance(const ArrayList<Any>& params) const override {
            Any val{};
            if (is_suitable_to_invoke(params)) {
                // Just praying for NRVO is working
## for param in ctor.params
                Any& any{{- loop.index }} = const_cast<Any&>(params[{{ loop.index }}]);
                {{ param.type }} p{{- loop.index }} = any_cast<{{ param.type }}>(any{{- loop.index -}});
## endfor
                val.emplace<{{ type_info.canonical_typename }}>
                (
## for param in ctor.params
                    p{{- loop.index -}} {% if loop.index1 != length(ctor.params) %},{% endif %}
## endfor
                );
            }
            return val;
        }
    };
## endfor
    /// === End Constructor Wrappers ===

    /// === Begin Member Function Wrappers ===
## for func in type_info.funcs
    class Func_{{- type_info.normal_name -}}_{{- loop.index -}}_{{- func.name -}} : public IMemberFunction {
    public:
        Func_{{- type_info.normal_name -}}_{{- loop.index -}}_{{- func.name -}}() : IMemberFunction(get_type<{{ type_info.canonical_typename }}>()) {}

        virtual const ArrayList<RTTITypeInfo>& get_params() const override {
            static ArrayList<RTTITypeInfo> STATIC_LIST {
## for param in func.params
                    zeno::reflect::type_info<{{ param.type }}>(),
## endfor
            };
            return STATIC_LIST;
        }

        virtual const ArrayList<RTTITypeInfo>& get_params_dacayed() const override {
            static ArrayList<RTTITypeInfo> STATIC_LIST {
## for param in func.params
                    zeno::reflect::type_info<TTDecay<{{ param.type }}>>(),
## endfor
            };
            return STATIC_LIST;
        }

        virtual TypeHandle get_return_type() const override {
            return get_type<{{ func.ret }}>();
        }

        virtual Any get_param_default_value(size_t index) override {
## for param in func.params
{% if param.has_default_arg %}
            if (index == {{ loop.index }}) {
                return { TInPlaceType<{{ param.type }}>{}, {{ param.default_arg }} };
            }
{% endif %}
## endfor
            return Any::make_null();
        }

        virtual Any invoke(const Any& clazz_object, const ArrayList<Any>& params) const override {
{% if func.static %}
            return invoke_static(params);
{% else %}
            if (clazz_object.type() == zeno::reflect::type_info<{{- type_info.canonical_typename -}}>()) {
                if (is_suitable_to_invoke(params)) {
                    Any& clazz_object_ = const_cast<Any&>(clazz_object);
                    auto& clazz = any_cast<{{- type_info.qualified_name -}}&>(clazz_object_);
## for param in func.params
                    Any& any{{- loop.index }} = const_cast<Any&>(params[{{ loop.index }}]);
                    {{ param.type }} p{{- loop.index }} = any_cast<{{ param.type }}>(any{{- loop.index -}});
## endfor
{% if func.ret == "void" %}
                    clazz.{{- func.name -}}
                    (
## for param in func.params
                        p{{{- loop.index -}} {% if loop.index1 != length(func.params) %},{% endif %}
## endfor
                    );
                    return Any::make_null();
{% else %}
                    return clazz.{{- func.name -}}
                    (
## for param in func.params
                        p{{{- loop.index -}} {% if loop.index1 != length(func.params) %},{% endif %}
## endfor
                    );
{% endif %}
                }
            }
            return Any::make_null();
{% endif %}
        }

        virtual Any invoke_static(const ArrayList<Any>& params) const override {
{% if func.static %}
            if (is_suitable_to_invoke(params)) {
## for param in func.params
                Any& any{{- loop.index }} = const_cast<Any&>(params[{{ loop.index }}]);
                {{ param }} p{{- loop.index }} = any_cast<{{ param }}>(any{{- loop.index -}});
## endfor
{% if func.ret == "void" %}
                {{- type_info.canonical_typename -}}::{{- func.name -}}
                (
## for param in func.params
                    p{{{- loop.index -}} {% if loop.index1 != length(func.params) %},{% endif %}
## endfor
                );
                return Any::make_null();
{% else %}
                return {{- type_info.canonical_typename -}}::{{- func.name -}}
                (
## for param in func.params
                    p{{{- loop.index -}} {% if loop.index1 != length(func.params) %},{% endif %}
## endfor
                );
{% endif %}
            }
{% else %}
            return Any::make_null();
{% endif %}
        }

        virtual StringView get_name() override {
            return "{{ func.name }}";
        }

        virtual bool is_static() const override {
            return {{ func.static }};
        }

        virtual bool is_const() const override {
            return {{ func.const }};
        }

        virtual bool is_no_except() const override {
            return {{ func.noexcept }};
        }
    };
## endfor
    /// === End Member Function Wrappers ===

    /// === Begin Member Field Wrappers ===
## for field in type_info.fields
    class Field_{{- type_info.normal_name -}}_{{- loop.index -}}_{{- field.name -}} : public IMemberField {
    public:
        Field_{{- type_info.normal_name -}}_{{- loop.index -}}_{{- field.name -}}() : IMemberField(get_type<{{- type_info.canonical_typename -}}>()) {}

        virtual void* get_field_ptr(const Any& clazz_object) const override {
            if (clazz_object.type() == zeno::reflect::type_info<{{- type_info.canonical_typename -}}>()) {
                Any& clazz_object_ = const_cast<Any&>(clazz_object);
                auto& clazz = any_cast<{{- type_info.qualified_name -}}&>(clazz_object_);
                return &clazz.{{ field.name }};
            }
            return nullptr;
        }

        virtual TypeHandle get_field_type() const override {
            return get_type<{{ field.type }}>();
        }

        virtual StringView get_name() override {
            return "{{ field.name }}";
        }

    };
## endfor
    /// === End Member Field Wrappers ===

    /// === Begin Record Type Wrapper ===
    class Type{{- type_info.normal_name -}}_Instance : public TypeBase {
    public:
        using Super = TypeBase;

        Type{{- type_info.normal_name -}}_Instance(const ReflectedTypeInfo& type_info) : Super(type_info) {
        }

        virtual std::size_t type_hash() const override {
            return get_rtti_info().hash_code();
        }

        virtual const RTTITypeInfo& get_rtti_info() const override {
            return zeno::reflect::type_info<{{ type_info.canonical_typename }}>();
        }

        virtual const ArrayList<ITypeConstructor*>& get_constructors() const override {
            static ArrayList<ITypeConstructor*> ctors {
## for params in type_info.ctors
                new ConstructorWrapperFor{{- type_info.normal_name -}}_{{- loop.index -}}(),
## endfor
            };
            return ctors;
        }

        virtual const ArrayList<IMemberFunction*>& get_member_functions() const override {
            static ArrayList<IMemberFunction*> funcs {
## for func in type_info.funcs
                new Func_{{- type_info.normal_name -}}_{{- loop.index -}}_{{- func.name -}}(),
## endfor
            };
            return funcs;
        }

        virtual const ArrayList<IMemberField*>& get_member_fields() const override {
            static ArrayList<IMemberField*> fields {
## for field in type_info.fields
                new Field_{{- type_info.normal_name -}}_{{- loop.index -}}_{{- field.name -}}(),
## endfor
            };
            return fields;
        }
    };
    /// === End Record Type Wrapper ===

    /// === Begin Static Registor ===
    struct S{{- type_info.normal_name -}}Registrator {
        S{{- type_info.normal_name -}}Registrator() {
            ReflectedTypeInfo info {};
            info.prefix = "{{ prefix }}";
            info.qualified_name = "{{ type_info.qualified_name }}";
            info.canonical_typename = "{{ type_info.canonical_typename }}";
            Type{{- type_info.normal_name -}}_Instance* type_impl = new Type{{- type_info.normal_name -}}_Instance(info);

            (ReflectionRegistry::get())->add(type_impl);
        }
    };
    static S{{- type_info.normal_name -}}Registrator global_S{{- type_info.normal_name -}}Registrator{};
    /// === End Static Registor ===
}
/// ==== End {{ type_info.qualified_name }} Register ====
## endfor
)INJA";
