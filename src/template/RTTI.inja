R"INJA(
///////////////////////////
/// Begin RTTI of "{{ cppType }}"
#ifndef _REFLECT_RTTI_GUARD_{{- name_normalized -}}_{{- hash }}
#define _REFLECT_RTTI_GUARD_{{- name_normalized -}}_{{- hash }} 1
{{ default(forwordDecl, "") }}
namespace zeno
{
namespace reflect
{
    template <>
    REFLECT_STATIC_CONSTEXPR const RTTITypeInfo& type_info<{{cppType}}>() {
        if REFLECT_FORCE_CONSTEPXR (std::is_same<typename std::decay<std::remove_pointer<{{cppType}}>::type>::type,{{cppType}}>::value) {
            static REFLECT_STATIC_CONSTEXPR RTTITypeInfo s = {
                "{{ name }}",
                {{ hash }}ULL,
                static_cast<size_t>(
                    {% if isPointer -%}TF_IsPointer | {%- endif -%} 
                    {% if isConst -%}TF_IsConst | {%- endif -%} 
                    {% if isRValueRef -%}TF_IsRValueRef | {%- endif -%} 
                    {% if isLValueRef -%}TF_IsLValueRef | {%- endif -%} 
                    TF_None )
            };
            return s;
        } else {
            static RTTITypeInfo decayed = {
                type_info<typename std::decay<std::remove_pointer<{{cppType}}>::type>::type>().name(),
                type_info<typename std::decay<std::remove_pointer<{{cppType}}>::type>::type>().hash_code(),
                TF_None
            };
            static REFLECT_STATIC_CONSTEXPR RTTITypeInfo s = {
                "{{ name }}",
                {{ hash }}ULL,
                static_cast<size_t>(
                    {% if isPointer -%}TF_IsPointer | {%- endif -%} 
                    {% if isConst -%}TF_IsConst | {%- endif -%} 
                    {% if isRValueRef -%}TF_IsRValueRef | {%- endif -%} 
                    {% if isLValueRef -%}TF_IsLValueRef | {%- endif -%} 
                    TF_None ),
                &decayed
            };
            return s;
        }
    }
}
}
#endif // _REFLECT_RTTI_GUARD_{{- name_normalized -}}_{{- hash }}
/// End RTTI of "{{ cppType }}"
///////////////////////////
)INJA";
